The "0-add_integer" module
===========================

Using "add_integer"
-----------

First import "add_integer" from the "0-add_integer" module:
	>>> add_integer = __import__("0-add_integer").add_integer

Now use it:
	Adding integers should return an integer
	>>> add_integer(1, 2)
	3

	Adding a float with a float should return an integer
	>>> add_integer(4.1, 3.4)
	7

	Adding a float and an integer should return an integer
	>>> add_integer(2.4, 4)
	6

	Adding two negative integers
	>>> add_integer(-5, -9)
	-14

	Adding zero to a float
	>>> add_integer(0, 7.8)
	7

	Passing a non int or float should raise a type error

	passing a char and an integer
	>>> add_integer('a', 4)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	>>> add_integer(5, 'c')
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

	passing both non float or int type
	>>> add_integer('e', {"id": 87})
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	passing string that can be casted to int
	>>> add_integer("879", 78)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	Passing an infinite long float
	>>> add_integer(3, float('inf'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

	passing a NAN
	>>> add_integer(4, float("nan"))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer

	passing string that can be casted to int
	>>> add_integer(111, "111")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

	missing one argument
	>>> add_integer(8)
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 2 required positional arguments:'a' and 'b'

	missing tow arguments
	>>> add_integer()
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 1 required positional argument: 'a'
