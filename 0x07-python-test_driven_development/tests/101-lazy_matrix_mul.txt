The "101-lazy_matrix_mul" module
===========================

Using matrix_mul
----------------

First import "matrix_mul" from the "101-lazy_matrix_mul" module:
	>>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

		Now use it
		----------

Passing two (2X2) matrices
	>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	array([[ 7, 10],
               [15, 22]])

Passing two (2X2) matrices with negative intger
	>>> lazy_matrix_mul([[-1, 2], [3, -4]], [[1, -2], [-3, 4]])
	array([[ -7,  10],
	       [ 15, -22]])

passing two (2X2) matrices with float
	>>> lazy_matrix_mul([[1.1, 2.1], [3.1, 4.1]], [[1.1, 2.1], [3.1, 4.1]])
	array([[ 7.72, 10.92],
               [16.12, 23.32]])

Passing multipliable different size matrices
	>>> lazy_matrix_mul([[1, 2]], [[1, 2], [3, 4]])
	array([[ 7, 10]])

passing (3X3) matrices
	>>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])
	array([[ 30,  36,  42],
               [ 66,  81,  96],
               [102, 126, 150]])

passing non list first argument
	>>> lazy_matrix_mul("python", [[1,2], [12, 4]])
	Traceback (most recent call last):
	...
	numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U6'), dtype('int64')) -> None

passing non list second argument
	>>> lazy_matrix_mul([[1,2], [12, 4]], "python")
	Traceback (most recent call last):
	...
	numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U6')) -> None

Passing multipliable different size matrices
	>>> lazy_matrix_mul([1, 2], [[1, 2], [3, 4]])
	array([ 7, 10])

Passing multipliable different size matrices
	>>> lazy_matrix_mul([[1, 2], [3, 4]], [1, 2])
	array([ 5, 11])

passing an empty list
	>>> lazy_matrix_mul([], [[0, 9]])
	Traceback (most recent call last):
	...
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 0)

passing an empty list
	>>> lazy_matrix_mul([[4, 7]], [])
	Traceback (most recent call last):
	...
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 0 is different from 2)

passing non int or float elements of list
	>>> lazy_matrix_mul([[8, 9]], [['c', 4]])
	Traceback (most recent call last):
	...
	numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U21')) -> None

passing non int or float elements of list
	>>> lazy_matrix_mul([['c', 4]], [[8, 9]])
	Traceback (most recent call last):
	...
	numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U21'), dtype('int64')) -> None

passing non rectangular matrix
	>>> lazy_matrix_mul([[4, 5, 9], [4, 5]], [[1, 2], [3, 4], [9, 10]])
	Traceback (most recent call last):
	...
	ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

passing non rectangular matrix
	>>> lazy_matrix_mul([[1, 2], [3, 4], [9, 10]], [[4, 5, 9], [4, 5]]) 
	Traceback (most recent call last):
	...
	ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

passing non non mulipliable matrices
	>>> lazy_matrix_mul([[4, 5, 9], [7, 4, 5]], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	...
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 3)

missing one argument
	>>> lazy_matrix_mul([[4, 5, 9], [7, 4, 5]])
	Traceback (most recent call last):
	...
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

missing tow arguments
	>>> lazy_matrix_mul()
	Traceback (most recent call last):
	...
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

